package db;

//TODO: Could make generics for the common variables between folder and file - such as name and id

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import java.util.List;

public class DBHelper {
    private static Transaction transaction; // make an instance of Transaction available
    private static Session session; // make an instance of Session available

    //A session is what you use to interact with the database
    //A transaction is used to specify boundaries for the session to operate within

    // Save an object to the database (WRITE Function)
    public static void save(Object object){ // take an Object Class Object - so any object Type
        session = HibernateUtil.getSessionFactory().openSession();
        try {
            transaction = session.beginTransaction();
            //A session is what you use to interact with the database
            //A transaction is used to specify boundaries for the session to operate within
            session.save(object); // prepares object to be saved to db
            transaction.commit(); // commit the save action
        } catch (HibernateException e) { // this ensure that an errors in the process initiates a recovery
            transaction.rollback();
            e.printStackTrace();
        } finally {
            session.close(); // closes the session or interaction with the db
        }
    }
    // after setting new object variables save those updates to the database (primarily WRITE Function)
    public static void update(Object object){ // takes an Object
        session = HibernateUtil.getSessionFactory().openSession();
        try {
            transaction = session.beginTransaction();
            session.update(object);
            transaction.commit();
        } catch (HibernateException e) {
            transaction.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }

    // deletes a entry from the db when provided with an Object (WRITE FUNCTION)
    public static void delete(Object object){
        session = HibernateUtil.getSessionFactory().openSession();
        try {
            transaction = session.beginTransaction();
            session.delete(object);
            transaction.commit();
        } catch (HibernateException e) {
            transaction.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }


    // Uses Generics to construct T and a List<T>
    //getall() method accepts the classType which is generated by Class.class (e.g. Pirate.class)
    // READ function
    public static <T> List<T> getAll(Class classType) {
        session = HibernateUtil.getSessionFactory().openSession();
        List<T> results = null; // generate an empty List capable of holding generics
        try {
            Criteria cr = session.createCriteria(classType); // the classType is passed in here
            results = cr.list(); // put the results of the criteria search into results
        } catch (HibernateException e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
        return results; // return the results of the search
    }

    //Use Generics
    //fin() method takes classtype (e.g., Pirate.class) and an int for the object's id (e.g., pirate.getID())
    public static <T> T find(Class classType, int id) { // provided the Class and id - e.g (Pirate.class, pirate1.id)
        session = HibernateUtil.getSessionFactory().openSession();
        T result = null;
        try {
            Criteria cr = session.createCriteria(classType);
            cr.add(Restrictions.eq("id", id));// restrict the search results to those that match provided id
            result = (T) cr.uniqueResult();
        } catch (HibernateException e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
        return result;
    }



}
